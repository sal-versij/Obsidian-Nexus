/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  default: () => ProgressPlugin
});
var import_obsidian = __toModule(require("obsidian"));

// src/utils.ts
var escapeHTML = (str) => {
  return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
};

// src/badge_renderer.ts
var BadgeRenderer = class {
  constructor() {
    this.renderBadge = (label, otherValue) => {
      const escapedLabel = escapeHTML(label);
      return `
    <div class="obsidian-badge_text">
      <div class="obsidian-badge_label">
        ${escapedLabel}
      </div>
      <div class="obsidian-badge_value">
        ${otherValue}
      </div>
    </div>
    `;
    };
    this.renderBadgeWithProgress = (label, remain, total) => {
      const escapedLabel = escapeHTML(label);
      const percentage = (remain / total * 100).toFixed(2);
      return `
    <div class="obsidian-badge_text">
      <div class="obsidian-badge_label">
        ${escapedLabel}
      </div>
      <div class="obsidian-badge_value">
        ${percentage}% <span>(${remain}/${total})</span>
      </div>
    </div>
    <div class="obsidian-badge_progress-bar">
      <span class="obsidian-badge_progress-bar-fill" style="width: ${percentage}%;">
      </span>
    </div>
    `;
    };
    this.renderError = (message) => {
      return `
    <div class="obsidian-badge_error">
      ${message}
    </div>
    `;
    };
  }
};

// src/badge_processor.ts
var BadgeProcessor = class {
  constructor() {
    this.processor = (sourceString, el) => {
      const rows = sourceString.trim().split("\n");
      return Promise.all(rows.map((row) => {
        return this._render(el, row);
      }));
    };
    this.renderer = new BadgeRenderer();
  }
  _render(el, content) {
    const pattern = /(?<label>.+):\s*(?<value>(?<progressValue>(?<remain>\d+)\/(?<total>\d+))|(?<otherValue>.+))/;
    const matchResult = content.match(pattern);
    const container = document.createElement("section");
    container.addClass("obsidian-badge_wrapper");
    if (matchResult) {
      const groups = matchResult.groups;
      if (groups.progressValue !== void 0 && groups.progressValue !== null && groups.progressValue !== "") {
        container.innerHTML = this.renderer.renderBadgeWithProgress(groups.label, +groups.remain, +groups.total);
      } else {
        container.innerHTML = this.renderer.renderBadge(groups.label, groups.otherValue);
      }
    } else {
      if (content !== "") {
        container.innerHTML = this.renderer.renderError(`Invalid badge format: ${content}`);
      }
    }
    el.appendChild(container);
  }
};

// src/main.ts
var ProgressPlugin = class extends import_obsidian.Plugin {
  onload() {
    const badgeProcessor = new BadgeProcessor();
    this.registerMarkdownCodeBlockProcessor("obsidian-badge", badgeProcessor.processor);
  }
};
